{"file":{"path":"E:\\Noah4\\PDF1\\metaspl\\BHUSA09-Gates-OracleMetasploit-PAPER.pdf","name":"BHUSA09-Gates-OracleMetasploit-PAPER.pdf","ext":".pdf","length":176914,"dir":"E:\\Noah4\\PDF1\\metaspl","creation":"2016-12-23T21:14:02","lastaccess":"2021-05-12T12:01:44","lastwrite":"2016-12-23T21:14:02"},"hash":{"md5":"009EBE786E2727B7FCCFF943D437CEFA","sha1":"8566078B43193265FC9AB90B9735EA1640307B03"},"tika":{"content-type":"application/pdf","creation-date":"2009-07-01T00:58:54","last-modified":"2009-07-10T21:05:12Z","last-save-date":"2009-07-10T21:05:12Z","x-parsed-by":["org.apache.tika.parser.DefaultParser","org.apache.tika.parser.pdf.PDFParser"],"access_permission.assemble_document":true,"access_permission.can_modify":true,"access_permission.can_print":true,"access_permission.can_print_degraded":true,"access_permission.extract_content":true,"access_permission.extract_for_accessibility":true,"access_permission.fill_in_form":true,"access_permission.modify_annotations":true,"cp.subject":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","created":"2009-07-01T00:58:54","date":"2009-07-10T21:05:12Z","dc.description":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","dc.format":"application/pdf; version=1.6","dcterms.created":"2009-07-01T00:58:54Z","dcterms.modified":"2009-07-10T21:05:12Z","description":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","meta.creation-date":"2009-07-01T00:58:54Z","meta.save-date":"2009-07-10T21:05:12Z","modified":"2009-07-10T21:05:12Z","pdf.pdfversion":"1.6","pdf.charsperpage":["1902","1906","1698","1295","1400","1833","366","1824","1292"],"pdf.docinfo.created":"2009-07-01T00:58:54Z","pdf.docinfo.creator_tool":"Writer","pdf.docinfo.modified":"2009-07-10T21:05:12Z","pdf.docinfo.producer":"OpenOffice.org 2.4","pdf.docinfo.subject":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","pdf.encrypted":false,"pdf.hasmarkedcontent":false,"pdf.hasxfa":false,"pdf.hasxmp":true,"pdf.producer":"OpenOffice.org 2.4","pdf.unmappedunicodecharsperpage":["0","0","0","0","0","0","0","0","0"],"producer":"OpenOffice.org 2.4","subject":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","xmp.createdate":"2009-06-30T20:58:54Z","xmp.creatortool":"Writer","xmp.metadatadate":"2009-07-10T14:05:12Z","xmp.modifydate":"2009-07-10T14:05:12Z","xmpmm.documentid":"uuid:6e51e5b0-fcc5-44df-b09a-80445b186bfc"},"pdf":{"info":{"creationdate_error":"D:20090630205854-04'00'","subject":"Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks.","producer":"OpenOffice.org 2.4","moddate":"D:20090710140512-07'00'"},"pdfversion":"6","metadata":{"x__x":["Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39"],"createdate":["7/1/2009 5:58:54 AM"],"creatortool":["Writer"],"modifydate":["7/11/2009 2:05:12 AM"],"metadatadate":["7/11/2009 2:05:12 AM"],"format":["application/pdf"],"seq":["Chris Gates"],"text":["Breaking the \"Unbreakable\" Oracle with Metasploit","Over the years there have been tons of Oracle exploits, SQL Injection vulnerabilities, and post exploitation tricks and tools that had no order, methodology, or standardization, mainly just random .sql files. Additionally, none of the publicly available Pentest Frameworks have the ability to leverage built-in package SQL Injection vulnerabilities for privilege escalation, data extraction, or getting operating system access. In this presentation we are going to present an Oracle Pentesting Methodology and give you all the tools to break the \"unbreakable\" Oracle as Metasploit auxiliary modules. We've created your version and SID enumeration modules, account bruteforcing modules, ported all the public (and not so public) Oracle SQL Injection vulnerabilities into SQLI modules (with IDS evasion examples for 10g/11g), modules for OS interaction, and modules for automating some of our post exploitation tasks."],"producer":["OpenOffice.org 2.4"],"documentid":["uuid:6e51e5b0-fcc5-44df-b09a-80445b186bfc"],"instanceid":["uuid:10d5c7fa-4fa7-4285-ae62-565f17f541f4"]},"tampered":false,"appendable":false,"cryptomode":-1},"sha256":"2C331AEA3F24A0638DB870152C9F2E454EA4591E4639FC872A2A7E322A340CC0","clean.language":"en-us,en","clean.title":"breaking the \"unbreakable\" oracle with metasploit","clean.pageCount":"9","clean.author":"chris gates","clean.creator":"[\"chris gates\",\"writer\"]"}